DECS rec CONTEXT VOID
USE standard:
{
  Algol 68 bindings for the librec (GNU recutils) library.  This file
  allows to use the librec library in Algol 68 programs compiled with
  the ctrans compiler.

  Copyright (C) 2011, 2012 Jose E. Marchesi

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see
  <http://www.gnu.org/licenses/>.
}

{ Include the needed headers  }

INT dummy = ALIEN "dummy" "#include ""config.h"""
                          "#include <rec.h>";

{ Constants.  }

INT rec major version =
   ALIEN "A68_REC_VERSION_MAJOR"
         "#define A68_REC_VERSION_MAJOR ((void*)REC_VERSION_MAJOR)";
INT rec minor version =
   ALIEN "A68_REC_VERSION_MINOR"
         "#define A68_REC_VERSION_MINOR ((void*)REC_VERSION_MINOR)";

REF CSTR rec version string alien =
   ALIEN "A68_REC_VERSION_STRING"
         "#define A68_REC_VERSION_STRING ((void*)REC_VERSION_STRING)";
PROC rec version string = STRING:
   MAKERVC CSTRTORVC rec version string alien;

{ Library initialization and finalization.  }

PROC VOID rec init = ALIEN "rec_init()" "/**/",
          rec fini = ALIEN "rec_fini()" "/**/";

{ Flexible buffers.  }

MODE RECBUF = CPTR;

PROC(REF VECTOR[]CHAR, REF INT)RECBUF rec buf new =
   ALIEN "A68_REC_BUF_NEW(data,size)"
         "#define A68_REC_BUF_NEW(data,size) rec_buf_new(&A_VC_charptr(data), &A_INT_size_t(size))";

PROC(RECBUF)VOID rec buf close =
   ALIEN "A68_REC_BUF_CLOSE(buf)"
         "#define A68_REC_BUF_CLOSE(buf) rec_buf_close(buf)";

PROC(INT,RECBUF)INT rec buf putc =
   ALIEN "A68_REC_BUF_PUTC(c,buf)"
         "#define A68_REC_BUF_PUTC(c,buf) A_int_INT(rec_buf_putc(A_INT_int(c),(rec_buf_t)buf))";

PROC(VECTOR[]CHAR,RECBUF)INT rec buf puts =
   ALIEN "A68_REC_BUF_PUTS(s,buf)"
         "#define A68_REC_BUF_PUTS(s,buf) A_int_INT(rec_buf_puts(A_VC_charptr(s),(rec_buf_t)buf))";

PROC(RECBUF,INT)VOID rec buf rewind =
   ALIEN "A68_REC_BUF_REWIND(buf,n)"
         "#define A68_REC_BUF_REWIND(buf,n) rec_buf_rewind((rec_buf_t)buf, A_INT_int(n))";

{ Msets.  }

MODE MSET     = CPTR;
MODE MSETELEM = CPTR;

INT mset any = ALIEN "MSET_ANY" "/**/";

PROC MSET rec mset new =
   ALIEN "A68_REC_MSET_NEW()"
         "#define A68_REC_MSET_NEW() rec_mset_new()";

PROC(MSET)VOID rec mset destroy =
   ALIEN "A68_REC_MSET_DESTROY(mset)"
         "#define A68_REC_MSET_DESTROY(mset) rec_mset_destroy (mset)";

PROC(MSET)MSET rec mset dup =
   ALIEN "A68_REC_MSET_DUP(mset)"
         "#define A68_REC_MSET_DUP(mset) rec_mset_dup (mset)";

PROC(MSET,INT)BOOL rec mset type p =
   ALIEN "A68_REC_MSET_TYPE_P(mset,type)"
         "#define A68_REC_MSET_TYPE_P(mset,type) (A68_BOOL) rec_mset_type_p (mset, A_INT_int(type))";

PROC(MSET,INT)INT rec mset count =
   ALIEN "A68_REC_MSET_COUNT(mset,type)"
         "#define A68_REC_MSET_COUNT(mset,type) rec_mset_count (mset, A_INT_int(type))";

PROC(MSET,INT,INT)CPTR rec mset get at =
   ALIEN "A68_REC_MSET_GET_AT(mset,type,position)"
         "#define A68_REC_MSET_GET_AT(mset,type,position) rec_mset_get_at (mset, A_INT_int(type), A_INT_int(position))";

PROC(MSET,INT,CPTR,INT)MSETELEM rec mset insert at =
   ALIEN "A68_REC_MSET_INSERT_AT(mset,type,data,position)"
         "#define A68_REC_MSET_INSERT_AT(mset,type,data,position) rec_mset_insert_at (mset, A_INT_int(type), data, A_INT_int(position))";

PROC(MSET,INT,CPTR,MSETELEM)MSETELEM rec mset insert after =
   ALIEN "A68_REC_MSET_INSERT_AFTER(mset,type,data,elem)"
         "#define A68_REC_MSET_INSERT_AFTER(mset,type,data,elem) rec_mset_insert_after (mset, A_INT_int(type), data, elem)";

PROC(MSET,INT,CPTR,INT)MSETELEM rec mset append =
   ALIEN "A68_REC_MSET_APPEND(mset,elem_type,data,type)"
         "#define A68_REC_MSET_APPEND(mset,elem_type,data,type) rec_mset_append (mset, A_INT_int(elem_type), data, A_INT_int(type))";

PROC(MSET,INT,CPTR)MSETELEM rec mset add sorted =
   ALIEN "A68_REC_MSET_ADD_SORTED(mset,type,data)"
         "#define A68_REC_MSET_ADD_SORTED(mset,type,data) rec_mset_add_sorted (mset, A_INT_int(type), data)";

PROC(MSET,INT,INT)BOOL rec mset remove at =
   ALIEN "A68_REC_MSET_REMOVE_AT(mset,type,position)"
         "#define A68_REC_MSET_REMOVE_AT(mset,type,position) (A68_BOOL) rec_mset_remove_at (mset, A_INT_int(type), A_INT_int(position))";

PROC(MSET,MSETELEM)BOOL rec mset remove elem =
   ALIEN "A68_REC_MSET_REMOVE_ELEM(mset,elem)"
         "#define A68_REC_MSET_REMOVE_ELEM(mset,elem) (A68_BOOL) rec_mset_remove_elem (mset,elem)";

PROC(MSET,CPTR)MSETELEM rec mset search =
   ALIEN "A68_REC_MSET_SEARCH(mset,data)"
         "#define A68_REC_MSET_SEARCH(mset,data) rec_mset_search (mset, data)";

{ Record Sets.  }

MODE RSET = CPTR;

PROC RSET rec rset new =
   ALIEN "A68_REC_RSET_NEW()"
         "#define A68_REC_RSET_NEW() rec_rset_new()";

PROC(RSET)VOID rec rset destroy =
   ALIEN "A68_REC_RSET_DESTROY(rset)"
         "#define A68_REC_RSET_DESTROY(rset) rec_rset_destroy(rset)";

PROC(RSET)RSET rec rset dup =
   ALIEN "A68_REC_RSET_DUP(rset)"
         "#define A68_REC_RSET_DUP(rset) rec_rset_dup(rset)"

KEEP

   { Constants.  }

   rec major version, rec minor version, rec version string,

   { Library initialization and finalization.  }

   rec init, rec fini,

   { Flexible buffers.  }

   rec buf new, rec buf close, rec buf putc, rec buf puts,
   rec buf rewind,

   { Msets.  }

   MSET, MSETELEM,
   mset any,
   rec mset new, rec mset destroy, rec mset dup, rec mset type p,
   rec mset count, rec mset get at, rec mset insert at,
   rec mset insert after, rec mset append, rec mset add sorted,
   rec mset remove at, rec mset remove elem, rec mset search,

   { Record sets.  }

   RSET,
   rec rset new, rec rset destroy, rec rset dup

FINISH
