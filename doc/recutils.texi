\input texinfo
@comment %**start of header
@setfilename recutils.info
@include version.texi
@settitle GNU Recutils
@afourpaper
@comment %**end of header

@copying
This manual is for GNU recutils (version @value{VERSION},
@value{UPDATED}).

Copyright @copyright{} 2009, 2010, 2011 Jose E. Marchesi

Copyright @copyright{} 1994-2011 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A
copy of the license is included in the section entitled ``GNU Free
Documentation License''.
@end quotation
@end copying

@dircategory Database
@direntry
* recutils: (recutils). The GNU Recutils manual.
@end direntry

@titlepage
@title GNU recutils
@subtitle for version @value{VERSION}, @value{UPDATED}
@author GNU recutils Developers (@email{bug-recutils@@gnu.org})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top GNU Recutils

This manual documents version @value{VERSION} of the GNU recutils.

@insertcopying
@end ifnottex

@menu
Overview
* Introduction::        Introducing the GNU recutils.
* A Little Example::    Recutils in action.

The Rec Format
* Fields and Records::  The basic structures conforming Rec files.
* Record Descriptors::  Describing different types of records.
* Compound Field Names:: Referencing record instances.
* Comments::            Comments are useful to store meta data.
* Field Types::         Types for fields can be defined in record
                          descriptors.
* Auto Generated Fields:: A way to implement auto-counters and
                          timestamps.
* External Descriptors:: Fetching descriptors from external sources.
* Date input formats::  Textual date representations that can be used
                          in Rec files.
* Regular Expressions:: Flavor of regexps supported in recfiles.

Utilities
* Common Options::      Common command line arguments for the record
                          utilities.
* recinf::              Printing information about rec files.
* recsel::              Selecting records.
* recins::              Inserting records.
* recdel::              Deleting records.
* recset::              Managing fields.
* recfix::              Fixing broken rec files, and diagnostics.
* recfmt::              Formatting records using templates.

* csv2rec::             Converting csv data into rec data.
* mdb2rec::             Converting mdb files into rec files.

* GNU Free Documentation License:: Distribution terms for this document.
@end menu

@node Introduction
@chapter Introduction

GNU recutils is a set of tools and libraries to access human-editable,
text-based databases called @emph{recfiles}.  The data is stored as a
sequence of records, each record containing an arbitrary number of
named fields.  Advanced capabilities usually found in other data
storage systems are supported: data types, data integrity (keys,
mandatory fields, etc) as well as the ability of records to refer to
other records (sort of foreign keys).  Despite its simplicity,
recfiles can be used to store medium-sized databases.

So, yet another data storage system?  The mere existence of this
package deserves an explanation.  There is a rich set of already
available free data storage systems, covering a broad range of
requirements.  Big systems having complex data storage requirements
will probably make use of some full-fledged relational system such as
MySQL or PostgreSQL.  Less demanding applications, or applications
with special deployment requirements, may find it more convenient to
use a simpler system such as SQLite, where the data is stored in a
single binary file.  XML files are often used to store configuration
settings for programs, and to encode data to be transmitted through
networks.

So it looks like all the needs are covered by the existing
solutions... but consider the following characteristics of the data
storage systems mentioned in the previous paragraph:

@table @minus
@item The stored data is not directly readable by humans.
@item The stored data is definitely not directly writable by humans.
@item They are program dependent.
@item They are not easily managed by version control systems.
@end table

Regarding the first point (human readability), while it is clearly
true for the binary files, some may argue XML files are indeed human
readable... well... <bar><foo tag=''val''>try</foo> to r&iamp;ead
<p>this</p></bar>.

Recfiles are human-readable, human-writable and still they are easy to
parse and to manipulate automatically.  Obviously they are not
suitable for any task (for example, it can be difficult to manage
hierarchies in recfiles) and performance is somewhat sacrificed in
favor of readability.  But they are quite handy to store small to
medium simple databases.

The GNU recutils suite comprises:

@itemize @minus
@item This texinfo manual, describing the Rec format and the accompaying software.
@item A C library (librec) that provides a rich set of functions to manipulate rec data.
@item A set of C utilities (recinf, recsel, recins, recdel, recset and  recfix) that can be used in shell scripts and in the command line to operate on rec files.
@item An emacs mode, @code{rec-mode}.
@end itemize

@node A Little Example
@chapter A Little Example

Everyone loves to grow a nice book collection at home.  Unfortunately,
in most cases the management of our private books gets uncontrolled:
some books get lost, some of them may be loaned to some friend, there
are some duplicated (or even triplicated!) titles because we forgot
about the existence of the previous copy, and many more details.

In order to improve the management of our little book collection we
could make use of a complex data storage system such as a relational
database.  The problem with that approach, as explained in the
previous section, is that the tool is too complicated for the simple
task: we do not need the full power of a relational database system to
maintain a simple collection of books.

With GNU recutils it is possible to maintain such a little database in
a text file.  Let's call it @file{books.rec}.  The following table
resumes the information items that we want to store for each title,
along with some common-sense restrictions.

@itemize @minus
@item
Every book has a title, even if it is ``No Title''.
@item
A book can have several titles.
@item
A book can have more than one author.
@item
Sometimes the author is not known.
@item
Sometimes we don't care about who the author of a book is.
@item
We usually store our books at home.
@item
We use to loan books to friends.
@item
On occasions we loose track to the physical location of a book.  Did
we loan it to anyone?  Was it lost in the last move?  Is it in some
hidden place at home?
@end itemize

The contents of the rec file follows:

@example
# -*- mode: rec -*-

%rec: Book
%mandatory: Title
%type: Location enum loaned home unknown
%doc:
+ A book in my personal collection.

Title: GNU Emacs Manual
Author: Richard M. Stallman
Publisher: FSF
Location: home

Title: The Colour of Magic
Author: Terry Pratchett
Location: loaned

Title: Mio Cid
Author: Anonymous
Location: home

Title: chapters.gnu.org administration guide
Author: Nacho Gonzalez
Author: Jose E. Marchesi
Location: unknown

Title: Yeelong User Manual
Location: home

# End of books.rec
@end example

Simple.  The file contains a set of records separated by blank lines.
Each record is composed by a set of fields with a name and a value.

The GNU recutils can then be used to access the contents of the file.
For example, we could get a list of the names of loaned books invoking
@command{recsel} in the following way:

@example
$ recsel -e "Location = 'loaned'" -P Title books.rec
The Colour of Magic
@end example

@node Fields and Records
@chapter Fields and Records

A @dfn{field} is the written form of an association between a label
and a value.  For example, if we wanted to associate the label
@code{Name} with the value @code{Ada Lovelace} we would write:

@example
Name: Ada Lovelace
@end example

The separator between the field name and the field value is a colon
followed by a blank character (space and tabs, but not newlines).  The
name of the field shall begin in the first column of the line.

A @dfn{field name} is a sequence of alphanumeric characters plus
dashes (@code{-}) and underscores (@code{_}), starting with a letter
or the character @code{%}.  The regular expression denoting a field
name is:

@example
[a-zA-Z%][a-zA-Z0-9_-]+
@end example

Field names are case-sensitive.  @code{Foo} and @code{foo} are
considered different field names.

The following list contains valid field names (the final colon is not
part of the names):

@example
Foo:
foo:
A23:
ab1:
A_Field:
@end example

The @dfn{value of a field} is a sequence of characters terminated by a
single newline character (@code{\n}).

Sometimes a value is too long to fit in the usual width of terminals
and screens.  In that case, depending on the specific tool used to
access the file, the readability of the data would not be that good.
It is therefore possible to physically split a logical line by
escaping a newline with a backslash character, as in:

@example
LongLine: This is a quite long value \
composed by a unique logical line \
split in several physical lines.
@end example

The sequence @code{\n} (newline) @code{+} (PLUS) and an optional
@code{_} (SPACE) is interpreted as a newline when found in a field
value.  For example, the C string @code{"bar1\nbar2\n bar3"} would be
encoded in the following way in a field value:

@example          
Foo: bar1
+ bar2
+  bar3
@end example

A @dfn{record} is a group of one or more fields written one after the
other:

@example
Name1: Value1
Name2: Value2
Name2: Value3
@end example

It is possible for several fields in a record to share the same name
or/and the field value. The following is a valid record containing
three fields:

@example
Name: John Smith
Email: john.smith@@foomail.com
Email: john@@smith.name
@end example

The @dfn{size of a record} is defined as the number of fields that it
contains.  There is no such like an empty record, so the minimum size
for a record is 1.  The maximum number of fields for a record is only
limited by the available physical resources.  The size of the previous
record is 3.

Records are separated by one or more blank lines.  For instance, the
following example shows a file named @file{personalities.rec}
featuring three records:

@example
Name: Ada Lovelace
Age: 36

Name: Peter the Great
Age: 53

Name: Matusalen
Age: 969
@end example

@node Record Descriptors
@chapter Record Descriptors

It is possible to specify certain properties of a set of records by
preceding them by a @dfn{record descriptor}.  A record descriptor is
itself a record, and uses fields with some predefined names to store
the properties.  The most basic property that can be specified for a
set of records is their @dfn{type}.  The special field name
@code{%rec} is used for that purpose:

@example
%rec: Entry

Id: 1
Name: Entry 1

Id: 2
Name: Entry 2
@end example

The presence of another record descriptor marks the end of the
application of the previous one.  So, in a file with the following
structure:

@example
REC0

RECORD-DESCRIPTOR-1

REC1

REC2

RECORD-DESCRIPTOR-2

REC3

REC4
@end example

@code{REC0} is not described by any record descriptor.  @code{REC1}
and @code{REC2} are described by @code{RECORD-DESCRIPTOR-1} while
@code{REC3} and @code{REC4} are described by
@code{RECORD-DESCRIPTOR-2}.

The record descriptor may contain the following predefined fields:

@table @code
@item %rec: @var{type} [@var{url_or_file}]
The value of this field is interpreted as the name of the kind of
record described by the record descriptor followed by an optional URL
or a file path.  The string used as the record type has the same
restrictions that the field names. @xref{Fields and Records}.

This field shall be unique in its containing record descriptor.

It is highly recommended (but not enforced) to place this field in the
first position of the record descriptor.
@item %mandatory: @var{field1} @var{field2} ... @var{fieldN}
The value of this field shall be a list of field names separated by
one or more blank characters:

@example
%mandatory: IdentifyNumber InStock
@end example

Those fields will be considered mandatory. i.e. a field with this name
shall be present in any record of this kind.  Records violating this
restriction are considered invalid.
@item %prohibit: @var{field1} @var{field2} ... @var{fieldN}
The value of this field shall be a list of field names separated by
one or more blank characters:

@example
%prohibit: Id
@end example

Those fields cannot appear in any record of this kind.  Records
violating this restriction are considered invalid.
@item %unique: @var{field1} @var{field2} ... @var{fieldN}
The value of this field shall be a list of field names separated by
one or more blank characters:

@example
%unique: IdNumber
@end example

Any record containing more than one field with those names is
considered invalid.
@item %key: @var{field}
The value of this field is interpreted as the name of a field, that
will be considered as the key of the records.

Its effect is that any field with that name is both unique and
mandatory, and additionally the values of those fields shall be
unique. 
@item %auto: @var{field1} @var{field2} ... @var{fieldN}
The value of this field shall be a list of field names separated by
one or more blank characters:

@example
%auto: Counter
@end example

The fields specified in the list will be auto-generated in newly
created records.  @ref{Auto Generated Fields}.
@item %doc
This field contains documentation about the record.

It is like a comment, but this field can be managed in a programmatic
way easier.
@item %type: @var{field_name_list} @var{type} @var{type_description}
This field can be used to define types for fields.
@var{field_name_list} shall be a list of field names separated by
commas.  @ref{Field Types}.
@end table

@node Compound Field Names
@chapter Compound Field Names

It is possible to make a reference to a record (or set of records) of
a certain type by using a @dfn{compound field name}.  A compound field
is composed by three components separated by double colon characters
(@code{:}):

@example
TYPE:FIELD[:ROLE]:
@end example

The first component is a record type, usually defined somewhere else
(@pxref{Record Descriptors}). The second component is the name of a
field.  Finally, an optional third component is the role played by the
referenced field in the referencing record.

The simplest kind of reference is one without an explicit role.  It is
used when only one association between records of different types is
desired.  Consider for example:

@example
%rec: Maintainer

Name: Jose E. Marchesi
Package:Name: recutils
@end example

In the previous example it is pretty clear which role is played by the
referenced package in the @code{Maintainer} record: it is the package
maintained by the maintainer.  But sometimes the role is not that
identifiable.  Consider for example the following record:

@example
%rec: Bug

Id: 203
Title: recsel crashes with files bigger than 2gb
Hacker:Name: Smitha Johnson
@end example

Seems to be a bug report.  But, what is the relationship between
Smitha Johnson and the bug? Is she the reporter?  Or perhaps she is
the hacker that is working to fix it?  Is she the hacker that closed
the bug?  We can clarify the role of Smitha by using the third part of
the compound field: her role.

@example
Id: 203
Title: recsel crashes with files bigger than 2gb
Hacker:Name:Reporter: Smitha Johnson
@end example

So now the situation is clear: Smitha is the reporter.

It is possible to make references to different instances of the same
record type by using roles.  Supposing that we want to record who is
the assignee of the bug report, we can introduce the new role
@code{Assignee}:

@example
Id: 203
Title: recsel crashes with files bigger than 2gb
Hacker:Name:Reporter: Smitha Johnson
Hacker:Name:Assignee: Juan Valdes 
@end example

Note that, like in the case of regular fields, there can be several
compound fields with the same name and the same implicit role in a
record, like in:

@example
%rec: Maintainer

Name: Jose E. Marchesi
Package:Name: GNU PDF
Package:Name: GNU Ferret
Package:Name: GNU rec
@end example

Same applies to several compound fields with explicit roles:

@example
%rec: Package

Name: GNU foo
Hacker:Name:Maintainer: Elvis 'The King' Presley
Hacker:Name:Maintainer: Michael 'The other King' Jackson
@end example

@node Comments
@chapter Comments

Any line having an @code{#} (ASCII 0x23) character in the first column
is a comment line.

Comment lines are quite useful to insert additional information that
is not part of the database but useful otherwise.

It is also quite convenient to comment-out information from the
recfile without having to remove it in a definitive way: you may want
to recover the data into the database later!  Comment lines can be
used to comment-out both full registers and single fields:

@example
Name: Jose E. Marchesi
# Occupation: Software Engineer
# Severe lack of brain capacity
# Fired on 02/01/2009 (without compensation)
Occupation: Unoccupied
@end example

Comments are also useful for headers, footers, comment blocks and all
kind of markers:

@example
# -*- mode: rec -*-
#
# TODO
#
# This file contains the Bugs database of GNU recutils.
#
# Blah blah...

...

# End of TODO
@end example

@node Field Types
@chapter Field Types

The default way to interpret the contents of fields in recfiles is as
unrestricted text strings.  However, sometimes it is useful to impose
some restrictions on the strings composing the values of fields. It is
thus possible to declare in a record descriptor that fields with a
given name shall contain values of a given type.  The syntax is:

@example
%type: @var{field_list} @var{type} @var{type_description}
@end example

@noindent
where @var{field_list} is a list of field names separated by
commas. Fields having those names will be of this type in the current
record set, @var{type} is the name of a supported field type and
@var{type_description} is additional information that varies from type
to type.

The following sections describe the supported types.

@menu
* Escalar types::       Numbers and ranges.
* String types::        Lines, limited strings and regular
                          expressions. 
* Enumerated types::    Enumerations and boolean values.
* Time related types::  Dates and times.
* Other types::         Emails, fields, ...
@end menu

@node Escalar types
@section Escalar types

The rec format supports the declaration of fields of the following
escalar types: integer numbers, ranges and reals.

Signed @dfn{integers} are supported by using the @code{integer}
declaration:

@example
%type: Id integer
@end example

Given that declaration, @code{Id} fields must contain integers, that
may be negative.  Valid examples are:

@example
Id: 100
Id: -23
Id: 0020
@end example

Sometimes it is desirable to reduce the @dfn{range} of integers allowed in a
field.  That can be achieved by using a range type declaration:

@example
%type: PercentComplete range 0 100
@end example

Note that it is possible to omit the minimum index in ranges.  In that
case it is implicitly zero:

@example
%type: PercentComplete range 100
@end example

@dfn{Real} fields can be declared with the @code{real} type
specifier.  A wide range of real numbers can be represented this way,
only limited by the underlying floating point representation.  Example
of the declaration of real fields and their usage:

@example
%type: Width,Height real

Width: 25.01
Height: 10
@end example

@node String types
@section String types

The @code{line} field type specifier can be used to restrict the value
of a field to a single line, i.e. no newline characters are allowed.
An example of a declaration and some fields:

@example
%type: Name line

Name: Mr. Foo Bar
Name: Mss. Bar Baz
Name: This is
+ invalid
@end example

Sometimes it is the maximum size of the field value that shall be
restricted.  The @code{size} field type specifier can be used to
define the maximum number of characters a field value can have.  For
example, if we were collecting input that will get written in a
paper-based forms system allowing up to 25 characters width entries,
we could declare the entries as:

@example
%type: Address size 25
@end example

Arbitrary restrictions can be defined by using regular expressions.
The @dfn{regexp} field type specifier introduces an ERE (extended
regular expression) that will be matched against fields having that
name.  The synopsis is:

@example
%type: Baz regexp /RE/
@end example

For example, consider the @code{ID_card} field containing numbers of
ID cards of some country:

@example
%type: ID_card regexp /[0-9]@{9@}[a-zA-Z]/

ID_card: 123456789Z
ID_card: invalid id card
@end example

Note that the slashes delimiting the @code{RE} can be replaced with
any other character that is not itself used as part of the regexp.
That is useful in some cases such as:

@example
%type: Filename regexp |(/[^/]/?)+|
@end example

The regexp flavor supported in recfiles are the POSIX EREs plus
several GNU extensions.  @xref{Regular Expressions}.

@node Enumerated types
@section Enumerated types

Fields of this type contain symbols taken from an enumeration.

The type is described by writing the sequence of symbols conforming
the enumeration.  Enumeration symbols are strings described by the
following regexp:

@example
[a-zA-Z0-9][a-zA-Z0-9_-]*
@end example

The symbols are separated by blank characters (including newlines).

For example:

@example
%type: Status enum NEW STARTED DONE CLOSED
%type: Day enum Monday Tuesday Wednesday Thursday Friday Saturday Sunday
@end example

It is possible to insert comments when describing an enum type.  The
comments are delimited by parenthesis.  The contents of the comments
can be any character but parenthesis.  For example:

@example
%rec: Task
%type: status enum
+ NEW         (The task was just created)
+ IN_PROGRESS (Task started)
+ CLOSED      (Task closed)
@end example

@dfn{Boolean} fields can be seen as special enumerations holding the
binary values.

@example
%type: Yesno boolean
@end example

The literals allowed in boolean fields are @code{yes/no}, @code{0/1}
and @code{true/false}.  Examples are:

@example
Yesno: 1
Yesno: yes
Yesno: false
@end example

@node Time related types
@section Time related types

The @dfn{Date} field type specifier can be used to declare dates and
times.  The synopsis is:

@example
%type: Born date
@end example

The several date/time syntax supported by librec is provided by the
@code{date} module from gnulib.  @xref{Date input formats}.

@node Other types
@section Other types

The @dfn{Email} field type specifier is used to declare electronic
addresses such as emails.  The synopsis is:

@example
%type: Email email
@end example

Sometimes it is useful to make fields to store field names.  For that
purpose the @dfn{Field} field type specifier is supported.  The
synopsis is:

@example
%type: AField field
@end example

@node Auto Generated Fields
@chapter Auto Generated Fields

Consider for example a list of articles in stock in a toys store:

@example
%rec: Item
%key: Description

Description: 2cm metal soldier WWII
Amount: 2111

Description: Flying Helicopter Indoor Maxi
Amount: 8

...
@end example

It would be natural to identify the items by its description, but it
is also error prone: was it ``Flying Helicopter Indoor Maxi'' or
``Flying Helicopter Maxi Indoor''? Was ``Helicopter'' in lower case or
upper case?

It is quite common in databases to use some kind of numeric ``Id'' to
uniquely identify items like those ones.  Numbers are easy to manage:

@example
%rec: Item
%key: Id
%mandatory: Description

Id: 0
Description: 2cm metal soldier WWII
Amount: 2111

Id: 1
Description: Flying Helicopter Indoor Maxi
Amount: 8

...
@end example

A problem of this approach is that we must be careful to not assign
already used ids when we introduce more articles in the
database. Other than its uniqueness, it is not important which number
is associated with which article.

To ease the management of those Ids database systems use to provide a
facility called ``auto-counters''. Auto-counters can be implemented in
recfiles using the @code{%auto} directive in the record descriptor:

@example
%rec: Item
%key: Id
%type: Id int
%mandatory: Description
%auto: Id

Id: 0
Description: 2cm metal soldier WWII
Amount: 2111
@end example

Next time a new item is introduced in the database, the conforming
application will note the @code{%auto}, and will create a new
@code{Id} field for the new record with the bigger unused integer
available.  In this example, the new record will have an Id of
@code{1}.  The application can still provide an explicit Id for the
new record.  In that case the field is not generated automatically.

The concrete effect of the @code{%auto} directive depends on the type
of the affected field:

@itemize @minus
@item If it is an @code{integer} or a @code{range} then the biggest non-used number in the record set will be generated.
@item If it is a @code{date} then a field with the current date will be generated.
@item Auto generated fields with other types are not allowed.
@end itemize

Auto generated dates can be used to implement automatic timestamps.
Consider for example a ``Transfer'' record set registering bank
transfers.  We want to save a timestamp every time a transfer is done,
so we include an @code{%auto} for the date:

@example
%rec: Transfer
%key: Id
%type: Id int
%type: Date date
%auto: Id Date
@end example

Note that the auto fields are generated at the beginning of the new
records, in the same order they are found in the @code{%auto}
directives.

@node External Descriptors
@chapter External Descriptors

Sometimes it is convenient to store records of the same type in
different files.  The duplication of record descriptors in this case
would surely lead to consistency problems.  A possible solution would
be to keep the record descriptor in a separated file and then include
it in any operation by using pipes.  For example:

@example
$ cat descriptor.rec data.rec | recsel ...
@end example

For those cases it is more convenient to use a @dfn{external
descriptor}.  External descriptors can be built appending a file path
to the @code{%rec} field value, like:

@example
%rec: FSD_Entry /path/to/file.rec
@end example

The previous example indicates that a record descriptor describing the
@code{FSD_Entry} records shall be read from the file
@file{/path/to/file.rec}.  A record descriptor for @code{FSD_Entry}
may not exist in the external file.  Both relative and absolute paths
can be specified there.

URLs can be used as sources for external descriptors as well:

@example
%rec: Department http://www.myorg.com/Org.rec
@end example

The URL shall point to a text file containing rec data.  If there is a
record descriptor in the remote file documenting the @code{Department}
type, it will be used.

Note that the local record descriptor can provide additional fields to
``expand'' the record type.  For example:

@example
%rec: FSD_Entry http://www.jemarch.net/downloads/FSD.rec
%mandatory: Rating
@end example

The record descriptor above is including the contents of the
@code{FSD_Entry} record descriptor from the URL, and adding them to
the local record descriptor, that in this case contains just the
@code{%mandatory} field.

If you are using the GNU recutils to process your recfiles, any URL
schema supported by @code{libcurl} will work.

@include parse-datetime.texi

@node Regular Expressions
@chapter Regular Expressions

The character @samp{.} matches any single character except the null character.

@table @samp

@item +
indicates that the regular expression should match one or more occurrences of the previous atom or regexp.
@item ?
indicates that the regular expression should match zero or one occurrence of the previous atom or regexp.
@item \+
matches a @samp{+}
@item \?
matches a @samp{?}.
@end table


Bracket expressions are used to match ranges of characters.  Bracket expressions where the range is backward, for example @samp{[z-a]}, are invalid.  Within square brackets, @samp{\} is taken literally.  Character classes are supported; for example @samp{[[:digit:]]} will match a single decimal digit.

GNU extensions are supported:
@enumerate

@item @samp{\w} matches a character within a word

@item @samp{\W} matches a character which is not within a word

@item @samp{\<} matches the beginning of a word

@item @samp{\>} matches the end of a word

@item @samp{\b} matches a word boundary

@item @samp{\B} matches characters which are not a word boundary

@item @samp{\`} matches the beginning of the whole input

@item @samp{\'} matches the end of the whole input

@end enumerate

Grouping is performed with parentheses @samp{()}.  An unmatched
@samp{)} matches just itself.  A backslash followed by a digit acts as
a back-reference and matches the same thing as the previous grouped
expression indicated by that number.  For example @samp{\2} matches
the second group expression.  The order of group expressions is
determined by the position of their opening parenthesis @samp{(}.

The alternation operator is @samp{|}.

The characters @samp{^} and @samp{$} always represent the beginning
and end of a string respectively, except within square brackets.
Within brackets, @samp{^} can be used to invert the membership of the
character class being specified.

@samp{*}, @samp{+} and @samp{?} are special at any point in a regular
expression except the following places, where they are not allowed:
@enumerate

@item At the beginning of a regular expression

@item After an open-group, signified by
@samp{(}
@item After the alternation operator @samp{|}

@end enumerate


Intervals are specified by @samp{@{} and @samp{@}}.  Invalid intervals
such as @samp{a@{1z} are not accepted.

The longest possible match is returned; this applies to the regular
expression as a whole and (subject to this constraint) to
subexpressions within groups.

@node Common Options
@chapter Common Options

Certain options are available in all of these programs.  Rather than
writing identical descriptions for each of the programs, they are
described here.

@table @samp
@item @w{@kbd{--version}}
Print the version number, then exit successfully.
@item @w{@kbd{--help}}
Print a help message, then exit successfully.
@item @w{@kbd{--}}
Delimit the option list.  Later arguments, if any, are treated as
operands even if they begin with @option{-}.  For example,
@end table

@menu
* Selection Expressions::  Selecting records of a database.
* Field Expressions::      Selecting fields of a record.
@end menu
      
@node Selection Expressions
@section Selection Expressions

@dfn{Selection expressions} (also known as a SEXs) are simple infix
expressions that can be applied to a record.  The result of the SEX is
typically interpreted as a Boolean value.

@menu
* SEX Operands::        Literal values, fields and sub-expressions.
* SEX Operators::       Arithmetic, logical and other operators.
* SEX Evaluation::      Selection expressions are like generators.
@end menu

@node SEX Operands
@subsection Operands

The supported operands are: numbers, strings, field names and
parenthesized expressions.

@subsubsection Numeric Literals

The supported numeric literals are integer numbers and real numbers.
The usual sign character @samp{-} is used to denote negative values.
Examples are:

@example
10000
0
-1342
.12
-3.14
@end example

Additional zeroes in the left of the number are allowed, so both
@samp{00} and @samp{0100} are legal integer literals.

@subsubsection String Literals

String values are delimited by the @code{'} character.  Examples are:

@example
'Hello.'
'The following example is the empty string.'
''
@end example

The @code{'} and @code{\n} characters can be part of a string if they
are escaped with a backslash, like in:

@example
'This string contains an apostrophe: \'.'
'This string is a\
multi lines string.'
@end example

@subsubsection Field Values

The value of a field value can be included in a selection expression
by writing its name.  The field name is replaced by a string
containing the field value, covering any possibility with records with
more than one field featuring that name.  The last colon character
(@code{:}) of the field name is optional.  Examples:

@example
Name
Email:
Hacker:Name:OpenedBy
@end example

It is possible to use the role part of a field if it is not empty.
So, for example, if we are searching for the issues opened by
@samp{John Smith} in a database of issues we could write:

@example
$ recsel -e "OpenedBy = 'John Smith'"
@end example

@noindent
instead of using the full field name:

@example
$ recsel -e "Hacker:Name:OpenedBy = 'John Smith'"
@end example

When the name of a field appears in an expression, the expression is
applied to all the fields in the record featuring that name.  So, for
example, the expression:

@example
Email ~ "\\.org"
@end example

Will match any record in which there is a field named @samp{Email}
whose value terminates in @samp{.org}.  If we are interested in the
value of some specific email, we can specify its relative position
into the containing record by using @dfn{subscripts}.  Consider, for
example:

@example
Email[0] ~ "\\.org"
@end example

@noindent
Will match for:

@example
Name: Mr. Foo
Email: foo@@foo.org
Email: mr.foo@@foo.com
@end example

@noindent
But not for:

@example
Name: Mr. Foo
Email: mr.foo@@foo.com
Email: foo@@foo.org
@end example

The regexp flavor supported in selection expressions are the POSIX
EREs plus several GNU extensions.  @xref{Regular Expressions}.

@subsubsection Parenthesized Expressions

Parenthesis characters (@code{(} and @code{)}) can be used to group
sub expressions in the usual way.

@node SEX Operators
@subsection Operators

The supported operators are arithmetic operators (addition,
subtraction, multiplication, division and modulus), logical operators,
string operators and field operators.

@subsubsection Arithmetic Operators

Arithmetic operators for addition (@code{+}), subtraction (@code{-}),
multiplication (@code{*}), integer division (@code{/}) and modulus
(@code{%}) are supported with their usual meanings.

These operators require either numeric operands or string operands
whose value can be interpreted as numbers (integer or real).

@subsubsection Boolean Operators

The boolean operators @strong{and} (@code{&&}), @strong{or}
(@code{||}) and  @strong{not} (@code{!}) are supported with the same
semantics as their C counterparts.

The boolean operators expect integer operands, and will try to convert
any string operand to an integer value.

@subsubsection Comparison Operators

The compare operators @strong{less than} (@code{<}), @strong{greater
than} (@code{>}), @strong{less than or equal} (@code{<=}),
@strong{greater than or equal} (@code{>=}), @strong{equal} (@code{=})
and @strong{unequal} (@code{!=}) are supported with their usual
meaning.

Strings can be compared with the equality operator (@code{=}).

The match operator (@code{~}) can be used to match a string with a
given regular expression.  The supported regexp syntax is described in
the GNU C library manual.

@subsubsection Date Comparison Operators

The compare operators @strong{before} (@code{<<}), @strong{after}
(@code{>>}) and @strong{same time} (@code{==}) can be used with fields
and strings containing parseable dates.

@xref{Date input formats}.

@subsubsection Field Operators

Field counters are replaced by the number of occurrences of a field
with the given name in the record.  For example:

@example
#Email
@end example

The previous expression is replaced with the number of fields named
@code{Email} in the record.  It can be zero if the record does not
have a field with that name.

@subsubsection String Operators

The string concatenation operator (@code{&}) can be used to
concatenate any number of strings and field values.

@example
'foo' & Name & 'bar'
@end example

@subsubsection Conditional Operator

The ternary conditional operator can be used to select alternatives
based on the value of some expression:

@example
expr1 ? expr2 : expr3
@end example

If @code{expr1} evaluates to true (i.e. it is an integer or the string
representation of an integer and its value is not zero) then the
operator yields @code{expr2}.  Otherwise it yields @code{expr3}.

Note that there should be always at least one blank character between
@code{expr2} and the colon (@code{:}) if @code{expr2} is a field name.
This is because field names can optionally end with a colon.

@node SEX Evaluation
@subsection Evaluation of Selection Expressions

Given that:

@itemize @minus
@item It is possible to refer to fields by name in selection expressions.
@item Records can have several fields featuring the same name.
@end itemize

It is clear that some backtracking mechanism is needed in the
evaluation of the selection expressions.  For example, consider the
following expression that is deciding whether a ``registration'' in a
webpage shall be rejected:

@example
((Email ~ "foomail\.com") || (Age <= 18)) && !#Fixed
@end example

The previous expression will be evaluated for every possible
permutation of the fields ``Email'', ``Age'' and ``Fixed'' present in
the record, until one of the combinations succeeds.  At that point the
computation is interrupted.

When used to decide whether a record matches some criteria, the goal
of a selection expression is to act as a boolean expression.  In that
case the final value of the expression depends on both the type and
the value of the result launched by the top-most subexpression:

@itemize @minus
@item If the result is an @b{integer}, the expression is true if its
value is not zero.
@item If the result is a @b{real}, or a @b{string}, the expression
evaluates to false.
@end itemize

Sometimes a selection expression is used to compute a result instead
of a boolean.  In that case the returned value is converted to a
string.  This is used when replacing the slots in templates
(@pxref{recfmt Templates}).

@node Field Expressions
@section Field Expressions

@dfn{Field expressions} (also known as FEXs) are a way to select
fields of a record.

A FEX is composed by a sequence of @dfn{elements} separated by commas:

@example
ELEM_1,ELEM_2,...,ELEM_N
@end example

Each element makes a reference to one or more fields in a record
identified by a given name and an optional subscript:

@example
@var{Field_Name}[@var{min}-@var{max}]
@end example

@noindent
@var{min} and @var{max} are zero-based indexes.  It is possible to
refer to a field occupying a given position.  For example, consider
the following record:

@example
Name: Mr. Foo
Email: foo@@foo.com
Email: foo@@foo.org
Email: mr.foo@@foo.org
@end example

@noindent
We would select all the emails of the record with:

@example
Email
@end example

@noindent
The first email with:

@example
Email[0]
@end example

@noindent
The third email with:

@example
Email[2]
@end example

@noindent
The second and the third email with:

@example
Email[1-2]
@end example

And so on.  Note that a selection is an ordered set not allowing
duplicated values.  Thus, the field expression:

@example
Email[0],Name,Email
@end example

@noindent
is equivalent to

@example
Email[0],Name,Email[1-2]
@end example

@node recinf
@chapter recinf

@command{recinf} reads the given rec files (or the data in the
standard input if no file is specified) and prints information about
it.

@menu
* recinf Invocation::  Command line options.
@end menu

@node recinf Invocation
@section recinf Invocation

@command{recinf} reads the given rec files (or the data in the
standard input if no file is specified) and prints a resume of the
record types contained in the input.

Synopsis:

@example
recinf [OPTION]... [FILE]...
@end example

The default behavior of the tool is to emit a line per record type in
the input containing its name and the number of records of that type:

@example
$ recinf hackers.rec tasks.rec
25 Hacker
102 Task
@end example

If the input contains anonymous records, i.e. records that are before
the first record descriptor, the corresponding line resume won't have
a type name:

@example
$ recinf data.rec
10
@end example

In addition of the common options described earlier (@pxref{Common
Options}) the program accepts the following options.

@table @samp
@item -t TYPE
@itemx @w{@kbd{--type}=@var{type}}
Select records of a given type only.
@item -d
@itemx @w{@kbd{--descriptor}}
Print all the record descriptors present in the file.
@item -n
@itemx @w{@kbd{--names-only}}
Output just the names of the record types found in the input.  If the
input is composed by anonymous records only then don't emit any
output.
@item -S
@itemx @w{@kbd{--print-sexps}}
Print the data in the form of sexps (lisp expressions) instead of rec
format.  This option is intended to be used by lisp programs.
@end table

@node recsel
@chapter recsel

@command{recsel} reads the given rec files (or the data in the
standard input if no file is specified) and prints out records (or
part of records) based in some criteria specified by the user.

@menu
* recsel Invocation::      Command line options.
* recsel Examples::        Examples of the usage of @command{recsel}.
@end menu

@node recsel Invocation
@section recsel Invocation

@command{recsel} searches rec files for records satisfying a certain
criteria.  Synopsis:

@example
recsel [OPTION]... [-n NUM | -e RECORD_EXPR] [-c | (-p|-P|-R) FIELD_EXPR] \
       [FILE]...
@end example

In addition of the common options described earlier (@pxref{Common
Options}) the program accepts the following options.

If no FILE is specified then the command acts like a filter, getting
the data from the standard input and writing the result in the
standard output.

The @dfn{selection options} are used to select a subset of
the records in the input.

@table @samp
@item -n @var{num}
Match the record occupying the @var{num}th position in its record
set.
@item -e @var{expr}
@itemx @w{@kbd{--expression}=@var{expr}}
A record selection expression (@pxref{Selection Expressions}).  Only
the records matched by the expression will be taken into account to
compute the output.
@item -t TYPE
@itemx @w{@kbd{--type}=@var{type}}
Select records of a given type only.
@end table

The @dfn{output options} are used to determine what information about
the selected records to display to the user, and how to display it.

@table @samp
@item -p @var{name_list}
@itemx @w{@kbd{--print}=@var{name_list}}
List of fields to print for each record.  @var{name_list} is a
list of field names separated by commas.  For example:
@example
-p Name,Email
@end example
means to print the Name and the Email of every matching record.

If this option is not specified then all the fields of the matching
records are printed in the standard output.
@item -P @var{name_list}
@itemx @w{@kbd{--print-values}=@var{name_list}}
Same than @samp{-p}, but print the values of the selected fields.
@item -R @var{name_list}
@itemx @w{@kbd{--print-row}=@var{name_list}}
Same than @samp{-P}, but print the values separated by single
spaces instead of newlines.
@item -c
@itemx @w{@kbd{--count}}
If this option is specified then recsel will print the number of
matching records instead of the records themselves.  This option is
incompatible with @option{-p}, @option{-P} and @option{-R}.
@end table

Some @dfn{special options} are available to ease the communication
between the recutils and other programs, such as lisp interpreters.
Those options are not intended to be used by human operators.

@table @samp
@item -S
@itemx @w{@kbd{--print-sexps}}
Print the data using sexps instead of rec format.
@end table

@node recsel Examples
@section recsel Examples

Print the closed bugs:

@example
$ recsel -t Task -e "Status = 'CLOSED'" TODO.rec
@end example

Print the name of all the registrants less than twenty:

@example
$ recsel -e 'Age < 20' -P Partner registrants.rec
@end example

@node recins
@chapter recins

@command{recins} adds new records to a rec file or to rec data read
from the standard input.

@menu
* recins Invocation::     Command line options.
* recins Examples::       Examples of the usage of @command{recins}.
@end menu

@node recins Invocation
@section recins Invocation

@command{recins} adds new records to a rec file or to rec data read
from the standard input.  Synopsis:

@example
recins [OPTION]... [t TYPE] [-n NUM | -e EXPR] \
       [(-f STR -v STR]|[-r RECDATA)]... [FILE]
@end example

The new record that will be inserted by the command is constructed by
using pairs of @samp{-f} and @samp{-v} options.  Each pair defines a
field.  The order of the parameters is significant.

If no FILE is specified then the command acts like a filter, getting
the data from the standard input and writing the result in the
standard output.

In addition to the common options described earlier (@pxref{Common
Options}) the program accepts the following options.

@table @samp
@item -t
@itemx @w{@kbd{--type}=@var{expr}}
The type of the new record.  If there is a record set in the input
data matching this type then the new record is added there.  Otherwise
a new record set is created.  If this parameter is not specified then
the new record is anonymous.
@item -f
@itemx @w{@kbd{--field}=@var{name}}
Declares the name of a field.  This option shall be followed by a
@samp{-v}.
@item -v
@itemx @w{@kbd{--value}=@var{value}}
The value of the field being defined.
@item -r
@itemx @w{@kbd{--record}=@var{value}}
Add the fields of the record in @var{value}.  This option can be
intermixed with @kbd{-f ... -v} pairs.
@itemx @w{@kbd{--no-external}}
Don't use external record descriptors.
@itemx @w{@kbd{--verbose}}
Be verbose when reporting integrity problems.
@itemx @w{@kbd{--no-auto}}
Don't generate @dfn{auto} fields. @xref{Auto Generated Fields}.
@end table

Record selection arguments are supported as well.  If they are used
then @command{recins} enters in ``replacement mode''.  Instead of
appending the new record, matched records are replaced by copies of
the provided record.  The selection arguments are summarized in the
next table.

@table @samp
@item -n @var{num}
Match the record occupying the @var{num}th position in its record
set.
@item -e @var{expr}
@itemx @w{@kbd{--expression}=@var{expr}}
A record selection expression (@pxref{Selection Expressions}).
Matching records will get replaced.
@end table

@node recins Examples
@section recins Examples

Create a new issue in the bugs database:

@example
$ recins -t Task  -f Id     -v 10           \
                  -f Title  -v "New issue." \
                  -f Status -v NEW          \
         TODO.rec
@end example

Register a new event in a log file, using recins as a filter:

@example
recins -f Date -v `date` -f Entry -v "$HW_ADDR device connected" \
       < $LOGFILE > $LOGFILE.t \
  && cat $LOGFILE.t >> $LOGFILE
@end example

@node recdel
@chapter recdel

@command{recdel} removes records from a rec file, or from rec data
read from the standard input.

@menu
* recdel Invocation::     Command line options.
* recdel Examples::       Examples of the usage of @command{recdel}.
@end menu

@node recdel Invocation
@section recdel Invocation

@command{recdel} removes records from a rec file, or from rec data
read from the standard input.  Synopsis:

@example
recdel [OPTIONS]... [-t TYPE] [-n NUM | -e EXPR] [FILE]
@end example

If no FILE is specified then the command acts like a filter, getting
the data from the standard input and writing the result in the
standard output.

In addition to the common options described earlier (@pxref{Common
Options}) the program accepts the following options.

@table @samp
@item -t
@itemx @w{@kbd{--type}=@var{expr}}
Remove records of the given type.  If this parameter is not specified
then records of any type will be removed.
@item -n @var{num}
Remove the record occupying the @var{num}th position in its record
set.
@item -e @var{expr}
@itemx @w{@kbd{--expression}=@var{expr}}
A record selection expression (@pxref{Selection Expressions}).  Only
the records matched by the expression will be removed from the file.
@item -c
@itemx @w{@kbd{--comment}}
Comment the matching records out instead of removing them.
@item -f
@itemx @w{@kbd{--force}}
Delete even in potentially dangerous situations, such as the request
to delete all the records of some type, for example.
@itemx @w{@kbd{--no-external}}
Don't use external record descriptors.
@itemx @w{@kbd{--verbose}}
Be verbose when reporting integrity problems.
@end table

@node recdel Examples
@section recdel Examples

Comment out closed issues in the bugs database:

@example
$ recdel -c -t Task -e "Status = 'CLOSED'" TODO.rec
@end example

@node recset
@chapter recset

@command{recset} manipulates the fields of records in a rec file.

@menu
* recset Invocation::     Command line options.
* recset Examples::       Examples of the usage of @command{recset}.
@end menu

@node recset Invocation
@section recset Invocation

@command{recset} manipulates the fields of records in a rec file, or
rec data read from the standard input.  Synopsis:

@example
recset [OPTION]... [FILE]...
@end example

If no FILE is specified then the command acts like a filter, getting
the data from the standard input and writing the result in the
standard output.

In addition to the common options described earlier (@pxref{Common
Options}) the program accepts the following options.

Record selection options:

@table @samp
@item -i
@itemx @w{@kbd{--case-insensitive}}
Make strings case-insensitive in selection expressions.
@item -t
@itemx @w{@kbd{--type}=@var{expr}}
Operate on the records of the given type.  If this parameter is not
specified then records of any type will be removed.
@item -n @var{num}
Remove the record occupying the @var{num}th position in its record
set.
@item -e @var{expr}
@itemx @w{@kbd{--expression}=@var{expr}}
A record selection expression (@pxref{Selection Expressions}).  Only
the records matched by the expression will be removed from the file.
@end table

Fields selection options:

@table @samp
@item -f
@itemx @w{@kbd{--fields}=@var{FEX}}
Field selection expression (@pxref{Field Expressions}) to select the
fields to operate.
@end table

Actions:

@table @samp
@item -s
@itemx @w{@kbd{--set}=@var{VALUE}}
Set the value of the selected fields to @var{VALUE}.
@item -a
@itemx @w{@kbd{--add}=@var{VALUE}}
Add a new field to the selected record with value @var{VALUE}.
@item -S
@itemx @w{@kbd{--set-add}=@var{VALUE}}
Set the value of the selected fiels to @var{VALUE}.  If some of the
fields don't exist in a record, append it with the specified value.
@item -r
@itemx @w{@kbd{--rename}=@var{VALUE}}
Rename a field.  @var{VALUE} shall be a valid field name.  The field
expression associated with this action shall contain a single field
name and an optional subscript.  If an entire record set is selected
then the field is renamed in the record descriptor as well.
@item -d
@itemx @w{@kbd{--delete}}
Delete the selected fields in the selected records.
@item -c
@itemx @w{@kbd{--comment}}
Comment out the selected fields in the selected records.
@itemx @w{@kbd{--no-external}}
Don't use external record descriptors.
@itemx @w{@kbd{--verbose}}
Be verbose when reporting integrity problems.
@itemx @w{@kbd{--force}}
Perform the requested operation even in potentially dangerous
situations, or when the integrity of the data stored in the fail is
affected.
@end table

@node recset Examples
@section recset Examples

Remove ``TmpName'' fields from any record in ``data.rec'':

@example
$ recset -f TmpName -d data.rec
@end example

Set the secondary email of all friends to @code{invalid@@email.com}:

@example
$ recset -f Email[1] -s invalid@@email.com friends.rec
@end example

Add the email @code{new@@email.com} to John Smith:

@example
$ recset -e "Name = 'John Smith'" -f Email -a new@@email.com friends.rec
@end example

Rename the secondary email fields from @code{Email} to
@code{AltEmail}.  Modify the record descriptor as well:

@example
$ recset -f Email[1] -r AltEmail friends.rec
@end example

Add a ClosedAt field to the selected record with the current date.  In
case it already exists, set its value instead:

@example
$ recset -n 102 -f ClosedAt -S `date` tasks.rec
@end example

@node recfix
@chapter recfix

@command{recfix} checks and fixes rec files.

@menu
* recfix Invocation::     Command line options.
* recfix Examples::       Examples of the usage of @command{recfix}.
@end menu

@node recfix Invocation
@section recfix Invocation

@command{recfix} checks and fixes rec files.  Synopsis:

@example
recfix [OPTION]... [FILE]...
@end example

If no FILE is specified then the command acts like a filter, getting
the data from the standard input and writing the result in the
standard output.

In addition to the common options described earlier (@pxref{Common
Options}) the program accepts the following options.

@table @samp
@itemx @w{@kbd{--no-external}}
Don't use external record descriptors.
@end table

@node recfix Examples
@section recfix Examples

Check and fix a rec database:

@example
$ recfix data.rec
@end example

The same, but with two files:

@example
$ recfix data1.rec data2.rec
@end example

Used as a filter:

@example
$ cat data1.rec data2.rec | recfix
@end example

@node recfmt
@chapter recfmt

@command{recfmt} formats records using templates.

@menu
* recfmt Invocation::    Command line options.
* recfmt Templates::     How to write templates.
* recfmt Examples::      Examples of the usage of @command{recfmt}. 
@end menu

@node recfmt Invocation
@section recfmt Invocation

@command{recfmt} formats records using templates.  Synopsis:

@example
recfmt [OPTION]... [TEMPLATE]
@end example

This program always works as a filter, getting the data from the
standard input and writing the result in the standard output.

In addition to the common options described earlier (@pxref{Common
Options}) the program accepts the following options.

@table @samp
@item -f
@itemx @w{@kbd{--filename}=@var{PATH}}
Read the template from the file in @var{PATH} instead of the command
line.
@end table

@node recfmt Templates
@section recfmt Templates

A recfmt template is a text string that may contain @dfn{template
spots}.  Those spots are substituted in the template using the
information of a given record.  Any text that is not into a spot is
literally copied to the output.

Spots are written surrounded by double curly braces, like:

@example
@{@{...@}@}
@end example

Spots contain selection expressions, that are executed every time the
template is applied to a record.  The spot is then replaced by the
string representation of the value returned by the expression.

For example, consider the following template:

@example
Task @{@{Id@}@}: @{@{Summary@}@}
------------------------
@{@{Description@}@}
--
Created at @{@{CreationTime@}@}
@end example

When applied to the following record:

@example
Id: 123
Summary: Fix recfmt.
CreatedAt: 12 December 2010
Description:
+ The recfmt tool shall be fixed, because right
+ now it is leaking 200 megabytes per processed record.
@end example

The result is:

@example
Task 123: Fix recfmt.
------------------------
The recfmt tool shall be fixed, because right
now it is leaking 200 megabytes per processed record.
--
Created at 12 December 2010
@end example

Note that you can use any selection expression in the slots, including
conditionals and string concatenation.

@node recfmt Examples
@section recfmt Examples

Apply a template in the 

@example
recsel employees.rec | recfmt 'Dear @{@{Name@}@}, you are fired.'
@end example

Read the template from a file:

@example
recsel employees.rec | recfmt -f fire-letter.tmpl
@end example

@node csv2rec
@chapter csv2rec

@command{csv2rec} reads the given comma-separated-values file (or the
data in the standard input if no file is specified) and prints out the
converted rec data, if possible.

@menu
* csv2rec Invocation::     Command line options.
* csv2rec Examples::       Examples of the usage of @command{csv2rec}.
@end menu

@node csv2rec Invocation
@section csv2rec Invocation

@command{csv2rec} converts CSV data into rec data.  Synopsis:

@example
csv2rec [OPTION]... [CSV_FILE]
@end example

In addition of the common options described earlier (@pxref{Common
Options}) the program accepts the following options.

@table @samp
@item -t @var{type}
@itemx @w{@kbd{--type}=@var{type}}
Type of the converted records.  If no type is specified then no type
is used.
@item -s
@itemx @w{@kbd{--strict}}
Be strict parsing the csv file.
@item -e
@itemx @w{@kbd{--omit-empty}}
Omit empty fields.
@end table

@node csv2rec Examples
@section csv2rec Examples

Convert from csv to rec:

@example
$ csv2rec contacts.csv > contacts.rec
@end example

Used as a filter, and omitting empty fields:

@example
$ cat contacts.csv | csv2rec -e > contacts.rec
@end example

@node mdb2rec
@chapter mdb2rec

@command{mdb2rec} reads the given mdb file and prints out the
converted rec data, if possible.

@menu
* mdb2rec Invocation::      Command line options.
* mdb2rec Examples::        Examples of the usage of @command{mdb2rec}.
@end menu

@node mdb2rec Invocation
@section mdb2rec Invocation

@command{mdb2rec} converts mdb files into rec data.  Synopsis:

@example
mdb2rec [OPTION]... MDB_FILE [TABLE]
@end example

All the tables contained in the mdb file are exported unless a table
is specified in the command line.

In addition of the common options described earlier (@pxref{Common
Options}) the program accepts the following options.

@table @samp
@item -s
@itemx @w{@kbd{--system-tables}}
Include system tables in the output.
@item -l
@itemx @w{@kbd{--list-tables}}
Dump a list of the table names contained in the mdb file, one per
line.
@item -e
@itemx @w{@kbd{--keep-empty-fields}}
Don't prune empty fields in the rec output.
@end table

@node mdb2rec Examples
@section mdb2rec Examples

Access files (@dfn{mdb files}) are collections of several relations,
also known as tables.  Tables can be either @dfn{user tables} storing
user data, or @dfn{system tables} storing information such as forms,
queries or the relationships between the tables.

It is possible to get a listing with the names of all tables stored in
a mdb file by calling @command{mdb2rec} in the following way:

@example
$ mdb2rec -l sales.mdb
Customers
Products
Orders
@end example

So @file{sales.mdb} stores user information in the tables Customers,
Products and Orders.  If we want to include system tables in the
listing we can use the @kbd{-s} command line option:

@example
$ mdb2rec -s -l sales.mdb
MSysObjects
MSysACEs
MSysQueries
MSysRelationships
Customers
Products
Orders
@end example

The tables with names starting with @command{MSys} are system tables.
The data stored in those tables is either not relevant to the recutils
user (used by the Access program to create forms and the like) or is
used in an indirect way by @command{mdb2rec} (such as the information
from MSysRelationships).

Let's read some data from the @file{mdb} file.  We can get the
relation of Products in rec format:

@example
$ mdb2rec sales.mdb Products
%rec: Products
%type: ProductID int
%type: ProductName size 80
%type: Discontinued bool

ProductID: 1
ProductName: GNU generation T-shirt
Discontinued: 0

...
@end example

A @dfn{record descriptor} is created for the record set containing the
generated records, called Products.  Note that @command{mdb2rec} is
able to generate type information for the fields.  The list of
customers is similar:

@example
$ mdb2rec sales.mdb Customers
%rec: Customers
%type: CustomerID size 4
%type: CompanyName size 80
%type: ContactName size 60

CustomerID: GSOFT
CompanyName: GNU Soft
ContactName: Jose E. Marchesi

...
@end example

The list of orders is a bit more interesting, since it shows how
@command{mdb2rec} manages the relationships between tables in the
@file{mdb} file.

@example
$ mdb2rec sales.mdb Orders
%rec: Orders
%type: OrderID int
%type: CustomerID size 10
%type: ProductID int
%type: OrderDate date

OrderID: 10248
Customers:CustomerID: FBFOU
Product:ProductID: 1
OrderDate: 2010-08-01T12:30:01

...
@end example

Both CustomerID and ProductID are compound fields reflecting
references to the record sets Customers and Products.

Note that @command{mdb2rec} always uses the default role when the name
of the column in the referring table is the same than the name of the
column in the referred table.  This is to avoid redundant compound
field names like Customers:CustomerID:CustomerID:.

If no table is specified in the invocation to @command{mdb2rec} all
the tables in the file are processed, with the exception of the system
tables, for which @kbd{-s} shall be used:

@example
$ mdb2rec sales.mdb
%rec: Products
...

%rec: Customers
...

%rec: Orders
...
@end example

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi

@bye
