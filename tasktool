#!/bin/bash

# Simple Tasks Manager, yay!

# Copyright (C) 2010 Jose E. Marchesi

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

## Configuration ##
#
# This section contains variables that can be tweaked by the user to
# adapt the behavior of tasktool.

# File containing the tasks database.
tt_db=TODO

# Tasktool depends on the GNU record utilities to work.  If they are
# not installed in your system please get them from
# ftp://ftp.gnu.org/gnu/recutils
#
# The following variables contain the names of the recutils that will
# be used by the script.

tt_recsel=recsel
tt_recins=recins
tt_recdel=recdel
tt_recset=recset
tt_recfix=recfix
tt_recinf=recinf

## Internal Variables ##
#
# The user don't want to touch them.

tt_tasktool=tasktool
tt_version="0.1"
tt_copyright_holder="Jose E. Marchesi"
tt_copyright_years="2010"
tt_db_template="\
# -*- mode: rec -*-
#
# TODO file for the GNU recutils.

%rec: Hacker
%key: Email
%fsort: Name Email
%doc:
+ Contributor to GNU recutils.

%rec: Task
%key: Id
%type: Title line
# %type: State enum open closed
%fsort: Id Title State Originator Description

# End of TODO
"

# Help messages
tt_help_footer="\
Report tasktool bugs to bug-recutils@gnu.org
tasktool home page: <http://www.gnu.org/software/recutils/tasktool/>
General help using GNU software: <http://www.gnu.org/gethelp/>"

tt_help="\
Usage: $tt_tasktool [OPTION]... ACTION [OPTION]...
Very simple tasks manager.

Mandatory arguments to long options are mandatory for short options too.
      --help                          print this help message and exit.
      --version                       print a version message and exit.

$tt_tasktool supports the following sub commands.

       list                           get a list of issues.
       show                           print information about a given task.

To get detailed help on a specific sub command use '$tt_tasktool CMD
--help', like in:

       tasktool show --help

$tt_help_footer"

tt_help_show="\
Usage: $tt_tasktool show [OPTION]... TASK_ID
Show information about a given task.

Mandatory arguments to long options are mandatory for short options too.
      --help                          print this help message and exit.

Examples:

        tasktool show 203

$tt_help_footer"

tt_help_list="\
Usage: $tt_tasktool list [OPTION]...
List tasks.

Mandatory arguments to long options are mandatory for short options too.
      --help                          print this help message and exit.
  -s, --state                         list tasks with the given state:
                                       'closed' or 'open'.
  -o, --originator                    list tasks with the given originator.

Examples:

        tasktool list
        tasktool list -s closed
        tasktool list -o jemarch@gnu.org

$tt_help_footer"

# Version message
tt_version="\
$tt_tasktool $tt_version
Copyright (C) $tt_copyright_years $tt_copyright_holder
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law."

## Recutils Interface ##

# Check the availability of the GNU recutils.  If they are not found,
# notify the user and exit.
tt_rec_check_utility ()
{
    # Parameters:
    # $1 => The name of the utility to check.
    test "$#" -gt "0" && {
        ${1} --version 2>&1 > /dev/null < /dev/null || tt_error "$1 not found"
    }
}

tt_rec_check_utilities ()
{
    for u in $tt_recinf \
             $tt_recfix \
             $tt_recsel \
             $tt_recins \
             $tt_recdel \
             $tt_recset
    do
        tt_rec_check_utility $u
    done
}

## DB Interface ##
#
# Accessing the tasks database.

# Test whether the database can be read.
# If it is not present then create a new one.
tt_db_check ()
{
    test -f ${tt_db} || \
        {
           echo "$tt_db_template" > ${tt_db}
           echo "$tt_tasktool: database initialized in ${tt_db}."
        }
}

# Test whether a task with the given ID exists in the database.
tt_db_task_p ()
{
    # Parameters:
    # $1 => Id of a task.
    COUNT=`${tt_recsel} -t Task -e "Id = '$1'" -c ${tt_db}`
    if test "$COUNT" -gt "0"
    then
        return 0
    fi

    return 1
}

# Show a given task
tt_db_show_task ()
{
    # Parameters:
    # $1 => Id of the task to show.
    ${tt_recsel} -t Task -e "Id = '$1'" ${tt_db}
}

## VC Interface ##
#
# Functions to interact with version control systems and hide its
# details.  Each operation OP implemented in this interface involves
# the creation of a couple of functions:
#
# tt_vc_OP
#
#    The VC-independent function.
#
# tt_vc_XXX_OP
#
#    Where XXX is the name of a supported version control system.

# Supported VCs
tt_supported_vcs="cvs git bzr"

## Utility Functions ##
#
# Misc functions used by the script.

# Print a message and exit with an error state.
tt_error ()
{
    if test "$#" -gt "0"
    then
        echo "error: $1" 2>&1
    fi
    
    exit 1
}

# Process the 'show' subcommand
tt_process_cmd_show ()
{
    TEMP=`getopt -o f:: --long help -n 'tasktool: show' -- "$@"`
    if test "$?" != "0"
    then
        exit 1
    fi
    eval set -- "$TEMP" || exit 1;

    while true
    do
        case "$1" in
            --help)
                echo "$tt_help_show"
                exit 1
                ;;
            *)
                shift
                break
                ;;
        esac
    done

    # Get the ID of the task to show.
    if test "$#" != "1"
    then
        echo "$tt_help_show"
        exit 1
    fi

    # Check if a task with a given ID exists.
    tt_db_task_p "$1" || \
        { echo "$tt_tasktool: task '$1' not found."; exit 1; }
    tt_db_show_task "$1"
}

# Process the 'list' subcommand
tt_process_cmd_list ()
{
    TEMP=`getopt -o -e:s:o: --long help,state,originator -n 'tasktool: list' -- "$@"`
    if test "$?" != "0"
    then
        exit 1
    fi
    eval set -- "$TEMP" || exit 1;

    selection_expression="1"
    state=""
    originator=""
    while true
    do
        case "$1" in
            --help)
                echo "$tt_help_list"
                exit 1;
                ;;
            -s|--state)
                state="$2"
                shift
                shift
                ;;
            -o|--originator)
                originator="$2"
                shift
                shift
                ;;
            *)
                shift
                break
                ;;
        esac
    done

    if test "$#" != "0"
    then
        echo "$tt_help_list"
        exit 1
    fi

    # Prepare the selection expression
    if test -n "$state"
    then
        selection_expression="$selection_expression && (State = '$state')"
    fi

    if test -n "$originator"
    then
        selection_expression="$selection_expression && (Originator = '$originator')"
    fi
    
    tasks=`${tt_recsel} -t Task -e "$selection_expression" ${tt_db}`
    ntasks=`echo "$tasks" | ${tt_recsel} -c`
    ntask="0"
    while test "$ntask" -lt "$ntasks"
    do
        task=`echo "$tasks" | ${tt_recsel} -n $ntask`
        task_id=`echo "$task" | ${tt_recsel} -P Id`
        task_title=`echo "$task" | ${tt_recsel} -P Title`
        
        echo "$task_id $task_title"

        ntask=`expr $ntask + 1`
    done
}

# Parse arguments and set some variables.
tt_parse_arguments ()
{
    TEMP=`getopt -o +:: --long help,version -n 'tasktool' -- "$@"`
    if test "$?" != "0"
    then
        exit 1
    fi
    eval set -- "$TEMP" || exit 1;
    
    while true
    do
        case "$1" in
            --version)
                echo "$tt_version"
                shift
                break
                ;;
            show)
                shift
                tt_process_cmd_show $*
                break
                ;;
            list)
                shift
                tt_process_cmd_list $*
                break
                ;;
            --)
                shift
                ;;
            --help)
                echo "$tt_help"
                exit 1
                ;;
            *)
                # Do nothing
                break;
                ;;
        esac
    done
}

## Start! ##

tt_db_check
tt_rec_check_utilities
tt_parse_arguments $*

# End of tasktool
